require_relative 'base58'
require 'json'

# Checks for arguments synactic correctness

class WellFormedArgs

  def initialize(s)
    @args = JSON.parse(s)
  rescue
    raise ArgumentError.new('json:malformed')
  end

  # - - - - - - - - - - - - - - - -

  def manifest
    @arg_name = __method__.to_s

    unless arg.is_a?(Hash)
      malformed
    end
    unless all_required_keys?
      malformed
    end
    if any_unknown_key?
      malformed
    end

    arg.keys.each do |key|
      value = arg[key]
      case key
      when 'id'
        unless Base58.string?(value)
          malformed
        end
        unless value.length == 6
          malformed
        end
      when 'visible_files'
        unless value.is_a?(Hash)
          malformed
        end
        value.each { |_filename,content|
          # arg is generated by JSON.parse()
          # and json hash keys can only be stringd
          unless content.is_a?(String)
            malformed
          end
        }
      when 'display_name', 'image_name', 'runner_choice', 'exercise'
        unless value.is_a?(String)
          malformed
        end
      when 'highlight_filenames','progress_regexs','hidden_filenames'
        unless value.is_a?(Array)
          malformed
        end
        value.each { |val|
          unless val.is_a?(String)
            malformed
          end
        }
      when 'tab_size', 'max_seconds'
        unless value.is_a?(Integer)
          malformed
        end
      when 'created'
        unless is_time?(value)
          malformed
        end
      when 'filename_extension'
        if value.is_a?(String)
          value = [ value ]
        end
        unless value.is_a?(Array)
          malformed
        end
        value.each { |val|
          unless val.is_a?(String)
            malformed
          end
        }
      end
    end
    arg
  end

  # - - - - - - - - - - - - - - - -

  def id
    @arg_name = __method__.to_s
    unless Base58.string?(arg)
      malformed
    end
    unless arg.length == 6
      malformed
    end
    arg
  end

  # - - - - - - - - - - - - - - - -

  def indexes
    @arg_name = __method__.to_s
    unless arg.is_a?(Array)
      malformed
    end
    unless arg.length == 64
      malformed
    end
    unless arg.sort == (0..63).to_a
      malformed
    end
    arg
  end

  private # = = = = = = = = = = = =

  attr_reader :args, :arg_name

  def arg
    args[arg_name]
  end

  # - - - - - - - - - - - - - - - -

  def all_required_keys?
    REQUIRED_KEYS.all? { |required_key| arg.keys.include?(required_key) }
  end

  REQUIRED_KEYS = %w(
    display_name
    image_name
    runner_choice
    created
    visible_files
  )

  # - - - - - - - - - - - - - - - -

  def any_unknown_key?
    arg.keys.any? { |key| !KNOWN_KEYS.include?(key) }
  end

  KNOWN_KEYS = REQUIRED_KEYS + %w(
    id
    exercise
    filename_extension
    highlight_filenames
    hidden_filenames
    progress_regexs
    tab_size
    max_seconds
  )

  # - - - - - - - - - - - - - - - -

  def is_time?(arg)
    unless arg.is_a?(Array)
      return false
    end
    unless arg.size == 6
      return false
    end
    unless arg.all? { |n| n.is_a?(Integer) }
      return false
    end
    Time.mktime(*arg)
    true
  rescue
    false
  end

  # - - - - - - - - - - - - - - - -

  def malformed
    raise ArgumentError.new("#{arg_name}:malformed")
  end

end